name: check build

on:
  # allow manually running workflow, useful for testing branches
  workflow_dispatch:
  # run on push in master
  push:
    branches:
      - master
    paths-ignore:
      - '.gitignore'
      - 'Brewfile'
      - 'dependencies-minimal.txt'
      - 'dependencies.txt'
  # run on pull request to master
  pull_request:
    branches:
      - masters
  
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  ubuntu-high-compiler:
    if: ${{ !(github.event_name == 'push' && github.ref == 'refs/heads/master' && github.repository != 'shmuz/far2m') }}
    runs-on: ubuntu-24.04
  
    strategy:
      fail-fast: false
      matrix:
        compiler: [ gcc, clang ]
        include:
          - compiler: gcc
            version: 14
            c: /usr/bin/gcc-14
            cxx: /usr/bin/g++-14
          - compiler: clang
            version: 18
            c: /usr/bin/clang-18
            cxx: /usr/bin/clang++-18
  
    name: ubuntu-${{ matrix.compiler }}-${{ matrix.version }}
  
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
  
      - name: Install far2m dependencies
        run: >
          sudo apt-get update;
          sudo apt-get -y install
          libuchardet-dev libxml2-dev libwxgtk3.2-dev
          libx11-dev libxi-dev
          libssl-dev libsmbclient-dev libnfs-dev libneon27-dev libssh-dev
          libarchive-dev
          python3-dev python3-cffi
          python3-markdown appstream
          libluajit-5.1-dev uuid-dev
  
      - name: Create Build Environment
        # Create a separate build directory as working directory for all subsequent commands
        run: mkdir -p _build
  
      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        # -S and -B options specify source and build directories
        run: > 
          cmake -S . -B _build -Wno-dev -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DPYTHON=yes
          -DCMAKE_C_COMPILER=${{ matrix.c }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx }}
  
      - name: Build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build _build --config $BUILD_TYPE
  
      # - name: Test plugin luamacro
      #   working-directory: ${{github.workspace}}/_build/install
      #   shell: bash
      #   run: FAR2M_STD=- ./far2m --tty lm:test
  
  macos14-arm64-clang15:
    if: ${{ !(github.event_name == 'push' && github.ref == 'refs/heads/master' && github.repository != 'shmuz/far2m') }}
    runs-on: macos-14

    steps:

      - name: Checkout source
        uses: actions/checkout@v4
  
      - name: Install far2m dependencies
        # libx11, openssl is already installed
        run: >
          brew install
          uchardet libxml2 wxwidgets
          libxi
          samba libnfs neon libssh
          libarchive
          luajit
          # ossp-uuid

      - name: Relink 'keg-only' packages
        run: brew link libarchive --force
  
      - name: Create Build Environment
        # Create a separate build directory as working directory for all subsequent commands
        run: mkdir -p _build
  
      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        # -S and -B options specify source and build directories
        run: cmake -S . -B _build -Wno-dev -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DPYTHON=yes
  
      - name: Build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build _build --config $BUILD_TYPE
          # cmake --build _build --config $BUILD_TYPE -j$(sysctl -n hw.logicalcpu)

      # - name: Test plugin luamacro
      #   working-directory: ${{github.workspace}}/_build/install/far2m.app/Contents/MacOS
      #   shell: bash
      #   run: FAR2M_STD=- ./far2m --tty lm:test

